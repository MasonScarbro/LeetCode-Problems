
LEGEND:                                                                                                                     
/* */ --> means extended non code comment longer than two lines.                                                             
                                                                                    
// // --> means comment or a non code format

RESULT --> this is the given result from Leetcode

// Code Used // --> Anything after this point is code that was put to use until the next // appears.

//THE line like at the bottom of the legend is to seperate questions//



//-------------------------------------------------------------------------------------------------------------------------------------------------//

//1026. Maximum Difference Between Node and Ancestor//
//Question://
/*Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.?*/
//Code Used://
class Solution {
public:
    int maxAncestorDiff(TreeNode* root) {
        int result = 0;
        dfs(root, result);
        return result;
    }

private:
    void dfs(TreeNode* node, int& result, int min_val = INT_MAX, int max_val = INT_MIN) {
        if (!node) return;

        min_val = std::min(min_val, node->val);
        max_val = std::max(max_val, node->val);

        result = std::max(result, max_val - min_val);

        dfs(node->left, result, min_val, max_val);
        dfs(node->right, result, min_val, max_val);
    }
};
// RESULT: ACCEPTED //
//-------------------------------------------------------------------------------------------------------------------------------------------------//

// 412. Fizz Buzz //
/* PROBLEM: Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true. */

// CODE USED: //
class Solution {
public:
    std::vector<std::string> fizzBuzz(int n) {
        std::vector<std::string> result;
        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 && i % 5 == 0) {
                result.push_back("FizzBuzz");
            } else if (i % 3 == 0) {
                result.push_back("Fizz");
            } else if (i % 5 == 0) {
                result.push_back("Buzz");
            } else {
                result.push_back(std::to_string(i));
            }
        }
        return result;
    }
};

// RESULT: ACCEPTED //

//-------------------------------------------------------------------------------------------------------------------------------------------------//

/*Question: Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. */


// CODE USED: //

class Solution {
public:
    int removeElement(std::vector<int>& nums, int val) {
        int i = 0;
        for (int j = 0; j < nums.size(); j++) {
            if (nums[j] != val) {
                nums[i++] = nums[j];
            }
        }
        return i;
    }
};

// RESULT: ACCEPTED // 

//-------------------------------------------------------------------------------------------------------------------------------------------------//

/* PROBLEM 1.)Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order. */

// CODE USED: //


class Solution {
    public int[] twoSum(int[] nums, int target) {
        int prevnum = 0;
        int[] indecies = new int[2];
        for (int i = 0; i < nums.length; i++){ // loops through the initial array
            for (int j = i + 1; j < nums.length; j++){ // loops through the array to search for a second indecie (j + 1 skips the first)
                if (nums[i] + nums[j] == target){ // checks if the arrays indecie numbers sum match the target
                    indecies[0] = i;
                    indecies[1] = j;
                    return indecies;
                }
            }
        }
        return null; // if loop does not return indecie return nothing
        
    }
}

// RESULT: ACCEPTED // 

//-------------------------------------------------------------------------------------------------------------------------------------------------//
 // PROBLEM 1480: //
 
 // CODE USED: //
 class Solution {
    public int[] runningSum(int[] nums) {

        int[] indecies = new int[nums.length];
        int sum = 0;
        // for loop that iterates of each indecie of the nums array // 
        for (int i = 0; i < nums.length; i++){

            sum += nums[i]; // has "sum" = sum + the current loop iteration indecie //
           
            
           
             indecies[i] = sum;
        }
        return indecies;

    }
}
// RESULT: ACCEPTED //
//-------------------------------------------------------------------------------------------------------------------------------------------------//

