
LEGEND:                                                                                                                     
/* */ --> means extended non code comment longer than two lines.                                                             
                                                                                    
// // --> means comment or a non code format

RESULT --> this is the given result from Leetcode

// Code Used // --> Anything after this point is code that was put to use until the next // appears.

//THE line like at the bottom of the legend is to seperate questions//



//-------------------------------------------------------------------------------------------------------------------------------------------------//

//1026. Maximum Difference Between Node and Ancestor//
//Question://
/*Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.?*/
//Code Used://
class Solution {
public:
    int maxAncestorDiff(TreeNode* root) {
        int result = 0;
        dfs(root, result);
        return result;
    }

private:
    void dfs(TreeNode* node, int& result, int min_val = INT_MAX, int max_val = INT_MIN) {
        if (!node) return;

        min_val = std::min(min_val, node->val);
        max_val = std::max(max_val, node->val);

        result = std::max(result, max_val - min_val);

        dfs(node->left, result, min_val, max_val);
        dfs(node->right, result, min_val, max_val);
    }
};
// RESULT: ACCEPTED //
//-------------------------------------------------------------------------------------------------------------------------------------------------//

// 412. Fizz Buzz //
/* PROBLEM: Given an integer n, return a string array answer (1-indexed) where:

answer[i] == "FizzBuzz" if i is divisible by 3 and 5.
answer[i] == "Fizz" if i is divisible by 3.
answer[i] == "Buzz" if i is divisible by 5.
answer[i] == i (as a string) if none of the above conditions are true. */

// CODE USED: //
class Solution {
public:
    std::vector<std::string> fizzBuzz(int n) {
        std::vector<std::string> result;
        for (int i = 1; i <= n; i++) {
            if (i % 3 == 0 && i % 5 == 0) {
                result.push_back("FizzBuzz");
            } else if (i % 3 == 0) {
                result.push_back("Fizz");
            } else if (i % 5 == 0) {
                result.push_back("Buzz");
            } else {
                result.push_back(std::to_string(i));
            }
        }
        return result;
    }
};

// RESULT: ACCEPTED //

//-------------------------------------------------------------------------------------------------------------------------------------------------//

/*Question: Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory. */


// CODE USED: //

class Solution {
public:
    int removeElement(std::vector<int>& nums, int val) {
        int i = 0;
        for (int j = 0; j < nums.size(); j++) {
            if (nums[j] != val) {
                nums[i++] = nums[j];
            }
        }
        return i;
    }
};

// RESULT: ACCEPTED // 

//-------------------------------------------------------------------------------------------------------------------------------------------------//

/* PROBLEM 1.)Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order. */

// CODE USED: //


class Solution {
    public int[] twoSum(int[] nums, int target) {
        int prevnum = 0;
        int[] indecies = new int[2];
        for (int i = 0; i < nums.length; i++){ // loops through the initial array
            for (int j = i + 1; j < nums.length; j++){ // loops through the array to search for a second indecie (i + 1 skips the first)
                if (nums[i] + nums[j] == target){ // checks if the arrays indecie numbers sum match the target
                    indecies[0] = i;
                    indecies[1] = j;
                    return indecies;
                }
            }
        }
        return null; // if loop does not return indecie return nothing
        
    }
}

// RESULT: ACCEPTED // 

//-------------------------------------------------------------------------------------------------------------------------------------------------//
 // PROBLEM 1480: //
 
 // CODE USED: //
 class Solution {
    public int[] runningSum(int[] nums) {

        int[] indecies = new int[nums.length];
        int sum = 0;
        // for loop that iterates of each indecie of the nums array // 
        for (int i = 0; i < nums.length; i++){

            sum += nums[i]; // has "sum" = sum + the current loop iteration indecie //
           
            
           
             indecies[i] = sum;
        }
        return indecies;

    }
}
// RESULT: ACCEPTED //
//-------------------------------------------------------------------------------------------------------------------------------------------------//
/* PROBLEM 912: Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible. */

// CODE USED: //
import java.util.*;

class Solution {
    public int[] sortArray(int[] nums) {
     

     for (int i = 0; i < nums.length - 1; i++){
         if (nums[i] > nums[i + 1]){
             int temp = nums[i + 1];
             nums[i+1] = nums[i];
             nums[i] = temp;
             i = -1;
             
         }
        
     }
     return nums;

    }
} 
// RESULT: EXCEEDED TIME COMPLEXITY // 

/* I saw this coming but i did do some research as to what the correct answer might be and it doesnt seem intuitive at all
or at least not at my level because I dont even know what Time complexity means */

// INTUITON: // 
/* The Idea is your swapping the number ahead of the array if it is bigger and then resetting i to zero to continually to get the number back to where it should be 
   The reason its i = -1 is because its a post incrementer so its actually just setting i = 0 since its running the entire loop and then incrementing 1 
   the reason nums.length - 1 is because if you dont do this it will run into an out of bounds exception in that if statement. lets run through a simple example to see this in action
   nums[] = { 1, 6, 9, 3}
   without the i = -1;
   output would be [ 1, 6, 3, 9]
   because it didnt reset so it only did the swap once
   with i = -1 
   output would be what it should: [1, 3, 6, 9]
   with that i going back to 0 each time its effectivley running the loop over and over again even though its just one for loop
   i = 0 nums[i] = 1 !> nums[i+1] = 6
   i = 1 nums[i] = 6 !> nums[i+i] = 9
   i = 2 nums[i] = 9  > nums[i+1] = 3  without i = -1 it would just stop [1, 6, 3, 9] but with...
   i = -1 loop finished therefore i = 0 
   i = 0 nums[i] = 1 !> nums[i+1] = 6
   i = 1 nums[i] = 6  > nums[i+1] = 3
   so now swap 6 and 3 and output is [1, 3, 6, 9]
   here you can also see where that (i < nums.length - 1) comes in as it would be a problem if it got to index 3 and tried to check if [REDACTED] was greater than 3
   */
   
   //-------------------------------------------------------------------------------------------------------------------------------------------------//
   

